{{- if .Values.logging.enabled }}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: nullplatform-log-controller
  namespace: nullplatform-tools
spec:
  selector:
    matchLabels:
      name: nullplatform-log-controller
  template:
    metadata:
      labels:
        name: nullplatform-log-controller
    spec:
      serviceAccountName: nullplatform-pod-metadata-reader-sa
      restartPolicy: Always
      containers:
        - name: nullplatform-log-controller
          image: {{ .Values.logging.controller.image }}
          imagePullPolicy: Always
          resources:
            {{- toYaml .Values.logging.controller.resources | nindent 12 }}
          {{- if .Values.logging.prometheus.enabled }}
          ports:
          - containerPort: {{ .Values.logging.prometheus.exporterPort }}
            hostPort: {{ .Values.logging.prometheus.exporterPort }}
            name: prometheus
            protocol: TCP
          {{- end }}
          volumeMounts:
            - mountPath: /var/log
              name: host-logs
            - mountPath: /etc/null-logs/dynamic
              name: logs-config
          {{- if .Values.logging.dynatrace.enabled }}
          envFrom:
            - secretRef:
                name: dynatrace-secret
          {{- end }}
          env:
            - name: NULL_LOGS_RELOAD_ENABLED
              value: 'true'
            {{- if .Values.logging.gelf.enabled }}
            - name: GELF_LOGS_ENABLED
              value: 'true'
            - name: GELF_LOGS_HOST
              value: {{ .Values.logging.gelf.host | quote }}
            - name: GELF_LOGS_PORT
              value: {{ .Values.logging.gelf.port | quote }}
            {{- end }}
            {{- if .Values.logging.dynatrace.enabled }}
            - name: DYNATRACE_LOGS_ENABLED
              value: 'true'
            - name: DYNATRACE_PERFORMANCE_METRICS_ENABLED
              value: 'true'
            {{- end }}
            - name: LOG_RESERVE_DATA
              value: 'False'
            - name: LOG_KEY_NAME
              value: message
            {{- if .Values.logging.datadog.enabled }}
            - name: DATADOG_LOGS_ENABLED
              value: 'true'
            - name: DATADOG_PERFORMANCE_METRICS_ENABLED
              value: 'true'
            {{- if .Values.logging.datadog.region }}
            - name: DATADOG_REGION
              value: {{ .Values.logging.datadog.region | quote }}
            {{- end }}
            - name: DATADOG_API_KEY
              valueFrom:
                secretKeyRef:
                  name: datadog-secret
                  key: DATADOG_API_KEY
            {{- end }}
            {{- if .Values.logging.newrelic.enabled }}
            - name: NEWRELIC_LOGS_ENABLED
              value: "true"
            - name: NEWRELIC_PERFORMANCE_METRICS_ENABLED
              value: "true"
            - name: NEWRELIC_LICENSE_KEY
              value: {{ .Values.logging.newrelic.licenseKey | quote }}
            {{- if .Values.logging.newrelic.region }}
            - name: NEWRELIC_REGION
              value: {{ .Values.logging.newrelic.region | quote }}
            {{- end }}
            {{- end }}
            {{- if .Values.cloudwatch.enabled }}
            - name: CLOUDWATCH_RETENTION_DAYS
              value: {{ .Values.cloudwatch.retentionDays | quote }}
            - name: CLOUDWATCH_REGION
              value: {{ .Values.cloudwatch.region | quote }}
            - name: CLOUDWATCH_LOGS_ENABLED
              value: {{ .Values.cloudwatch.logs.enabled | quote }}
            - name: CLOUDWATCH_PERFORMANCE_METRICS_ENABLED
              value: {{ .Values.cloudwatch.performanceMetrics.enabled | quote }}
            - name: CLOUDWATCH_CUSTOM_METRICS_ENABLED
              value: {{ .Values.cloudwatch.customMetrics.enabled | quote }}
            - name: CLOUDWATCH_ACCESS_LOGS_ENABLED
              value:  {{ .Values.cloudwatch.accessLogs.enabled | quote }}
            {{- end}}
            {{- if .Values.logging.loki.enabled }}
            - name: LOKI_LOGS_ENABLED
              value: 'true'
            - name: LOKI_HOST
              value: {{ .Values.logging.loki.host }}
            - name: LOKI_PORT
              value: {{ .Values.logging.loki.port }}
            - name: LOKI_MATCH_REGEX
              value: {{ .Values.logging.loki.matchRegex }}
            {{- if and .Values.logging.loki.user .Values.logging.loki.password }}
            - name: LOKI_USER
              valueFrom:
                secretKeyRef:
                  name: loki-secret
                  key: LOKI_USER
            - name: LOKI_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: loki-secret
                  key: LOKI_PASSWORD
            {{- end}}
            {{- if .Values.logging.loki.bearerToken }}
            - name: LOKI_BEARER_TOKEN
              valueFrom:
                secretKeyRef:
                  name: loki-secret
                  key: LOKI_BEARER_TOKEN
            {{- end}}
            {{- end}}
            {{- if .Values.logging.prometheus.enabled }}
            - name: PROMETHEUS_PERFORMANCE_METRICS_EXPORTER_PORT
              value: {{ .Values.logging.prometheus.exporterPort | quote }}
            - name: PROMETHEUS_PERFORMANCE_METRICS_ENABLED
              value: 'true'
            {{- end}}
        {{- if and .Values.controlPlane.enabled (or .Values.nullplatform.apiKey .Values.nullplatform.secretName) }}
        - name: nullplatform-controlplane-agent
          image: {{ .Values.controlPlane.agent.image }}
          resources:
            {{- toYaml .Values.controlPlane.agent.resources | nindent 12 }}
          command:
            - /app/k8s_launcher.sh
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: NULLPLATFORM_APIKEY
              valueFrom:
                secretKeyRef:
                  key: NULLPLATFORM_APIKEY
                  name: {{ if .Values.nullplatform.secretName }}{{ .Values.nullplatform.secretName }}{{ else }}nullplatform-secret{{ end }}
          image: public.ecr.aws/nullplatform/controlplane-agent:latest
          imagePullPolicy: Always
          volumeMounts:
          - mountPath: /etc/null-logs/dynamic
            name: logs-config
        {{- end}}
      volumes:
        - name: host-logs
          hostPath:
            path: /var/log
        - name: logs-config
          emptyDir: {}
{{- end}}
